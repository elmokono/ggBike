#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="test_daniel")]
	public partial class DatabaseModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDevice(Device instance);
    partial void UpdateDevice(Device instance);
    partial void DeleteDevice(Device instance);
    partial void InsertTrial(Trial instance);
    partial void UpdateTrial(Trial instance);
    partial void DeleteTrial(Trial instance);
    partial void InsertRunner(Runner instance);
    partial void UpdateRunner(Runner instance);
    partial void DeleteRunner(Runner instance);
    partial void InsertSpin(Spin instance);
    partial void UpdateSpin(Spin instance);
    partial void DeleteSpin(Spin instance);
    #endregion
		
		public DatabaseModelDataContext() : 
				base("Data Source=win7dev\\sqlexpress;Initial Catalog=test_daniel;Persist Security Info=" +
						"True;User ID=sa;Password=yayayaya", mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Device> Devices
		{
			get
			{
				return this.GetTable<Device>();
			}
		}
		
		public System.Data.Linq.Table<Trial> Trials
		{
			get
			{
				return this.GetTable<Trial>();
			}
		}
		
		public System.Data.Linq.Table<Runner> Runners
		{
			get
			{
				return this.GetTable<Runner>();
			}
		}
		
		public System.Data.Linq.Table<Spin> Spins
		{
			get
			{
				return this.GetTable<Spin>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCurrent")]
		public ISingleResult<GetCurrentResult> GetCurrent([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(25)")] string deviceId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> gapMillis)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), deviceId, gapMillis);
			return ((ISingleResult<GetCurrentResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.StopTrial")]
		public int StopTrial([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(25)")] string deviceId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), deviceId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRunner")]
		public ISingleResult<GetRunnerResult> GetRunner([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> runnerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), runnerId);
			return ((ISingleResult<GetRunnerResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.StartTrial")]
		public int StartTrial([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(25)")] string deviceId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> runnerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), deviceId, runnerId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Devices")]
	public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private decimal _Circunference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnCircunferenceChanging(decimal value);
    partial void OnCircunferenceChanged();
    #endregion
		
		public Device()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Circunference", DbType="Decimal(18,2) NOT NULL")]
		public decimal Circunference
		{
			get
			{
				return this._Circunference;
			}
			set
			{
				if ((this._Circunference != value))
				{
					this.OnCircunferenceChanging(value);
					this.SendPropertyChanging();
					this._Circunference = value;
					this.SendPropertyChanged("Circunference");
					this.OnCircunferenceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trials")]
	public partial class Trial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RunnerId;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private EntitySet<Spin> _Spins;
		
		private EntityRef<Runner> _Runner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRunnerIdChanging(int value);
    partial void OnRunnerIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Trial()
		{
			this._Spins = new EntitySet<Spin>(new Action<Spin>(this.attach_Spins), new Action<Spin>(this.detach_Spins));
			this._Runner = default(EntityRef<Runner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunnerId", DbType="Int NOT NULL")]
		public int RunnerId
		{
			get
			{
				return this._RunnerId;
			}
			set
			{
				if ((this._RunnerId != value))
				{
					if (this._Runner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRunnerIdChanging(value);
					this.SendPropertyChanging();
					this._RunnerId = value;
					this.SendPropertyChanged("RunnerId");
					this.OnRunnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trial_Spin", Storage="_Spins", ThisKey="Id", OtherKey="TrialID")]
		public EntitySet<Spin> Spins
		{
			get
			{
				return this._Spins;
			}
			set
			{
				this._Spins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Runner_Trial", Storage="_Runner", ThisKey="RunnerId", OtherKey="Id", IsForeignKey=true)]
		public Runner Runner
		{
			get
			{
				return this._Runner.Entity;
			}
			set
			{
				Runner previousValue = this._Runner.Entity;
				if (((previousValue != value) 
							|| (this._Runner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Runner.Entity = null;
						previousValue.Trials.Remove(this);
					}
					this._Runner.Entity = value;
					if ((value != null))
					{
						value.Trials.Add(this);
						this._RunnerId = value.Id;
					}
					else
					{
						this._RunnerId = default(int);
					}
					this.SendPropertyChanged("Runner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Spins(Spin entity)
		{
			this.SendPropertyChanging();
			entity.Trial = this;
		}
		
		private void detach_Spins(Spin entity)
		{
			this.SendPropertyChanging();
			entity.Trial = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Runners")]
	public partial class Runner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullName;
		
		private string _EMail;
		
		private EntitySet<Trial> _Trials;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    #endregion
		
		public Runner()
		{
			this._Trials = new EntitySet<Trial>(new Action<Trial>(this.attach_Trials), new Action<Trial>(this.detach_Trials));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NChar(255) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="NChar(255) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Runner_Trial", Storage="_Trials", ThisKey="Id", OtherKey="RunnerId")]
		public EntitySet<Trial> Trials
		{
			get
			{
				return this._Trials;
			}
			set
			{
				this._Trials.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trials(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Runner = this;
		}
		
		private void detach_Trials(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Runner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Spins")]
	public partial class Spin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Millis;
		
		private double _Spins;
		
		private System.DateTime _TimeStamp;
		
		private int _TrialID;
		
		private EntityRef<Trial> _Trial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMillisChanging(int value);
    partial void OnMillisChanged();
    partial void OnSpinsChanging(double value);
    partial void OnSpinsChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnTrialIDChanging(int value);
    partial void OnTrialIDChanged();
    #endregion
		
		public Spin()
		{
			this._Trial = default(EntityRef<Trial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Millis", DbType="Int NOT NULL")]
		public int Millis
		{
			get
			{
				return this._Millis;
			}
			set
			{
				if ((this._Millis != value))
				{
					this.OnMillisChanging(value);
					this.SendPropertyChanging();
					this._Millis = value;
					this.SendPropertyChanged("Millis");
					this.OnMillisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spins", DbType="Float NOT NULL")]
		public double Spins
		{
			get
			{
				return this._Spins;
			}
			set
			{
				if ((this._Spins != value))
				{
					this.OnSpinsChanging(value);
					this.SendPropertyChanging();
					this._Spins = value;
					this.SendPropertyChanged("Spins");
					this.OnSpinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrialID", DbType="Int NOT NULL")]
		public int TrialID
		{
			get
			{
				return this._TrialID;
			}
			set
			{
				if ((this._TrialID != value))
				{
					if (this._Trial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrialIDChanging(value);
					this.SendPropertyChanging();
					this._TrialID = value;
					this.SendPropertyChanged("TrialID");
					this.OnTrialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trial_Spin", Storage="_Trial", ThisKey="TrialID", OtherKey="Id", IsForeignKey=true)]
		public Trial Trial
		{
			get
			{
				return this._Trial.Entity;
			}
			set
			{
				Trial previousValue = this._Trial.Entity;
				if (((previousValue != value) 
							|| (this._Trial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trial.Entity = null;
						previousValue.Spins.Remove(this);
					}
					this._Trial.Entity = value;
					if ((value != null))
					{
						value.Spins.Add(this);
						this._TrialID = value.Id;
					}
					else
					{
						this._TrialID = default(int);
					}
					this.SendPropertyChanged("Trial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetCurrentResult
	{
		
		private int _trialId;
		
		private System.Nullable<int> _runnerId;
		
		private System.Nullable<double> _rpm;
		
		private System.Nullable<double> _kmh;
		
		public GetCurrentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trialId", DbType="Int NOT NULL")]
		public int trialId
		{
			get
			{
				return this._trialId;
			}
			set
			{
				if ((this._trialId != value))
				{
					this._trialId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runnerId", DbType="Int")]
		public System.Nullable<int> runnerId
		{
			get
			{
				return this._runnerId;
			}
			set
			{
				if ((this._runnerId != value))
				{
					this._runnerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rpm", DbType="Float")]
		public System.Nullable<double> rpm
		{
			get
			{
				return this._rpm;
			}
			set
			{
				if ((this._rpm != value))
				{
					this._rpm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kmh", DbType="Float")]
		public System.Nullable<double> kmh
		{
			get
			{
				return this._kmh;
			}
			set
			{
				if ((this._kmh != value))
				{
					this._kmh = value;
				}
			}
		}
	}
	
	public partial class GetRunnerResult
	{
		
		private System.Nullable<int> _runnerId;
		
		private string _runnerEmail;
		
		private string _runnerFullName;
		
		private System.Nullable<int> _ms;
		
		private System.Nullable<double> _spins;
		
		private System.Nullable<decimal> _hs;
		
		private System.Nullable<double> _rpm;
		
		private System.Nullable<double> _meters;
		
		private System.Nullable<double> _kmh;
		
		public GetRunnerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runnerId", DbType="Int")]
		public System.Nullable<int> runnerId
		{
			get
			{
				return this._runnerId;
			}
			set
			{
				if ((this._runnerId != value))
				{
					this._runnerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runnerEmail", DbType="NChar(255)")]
		public string runnerEmail
		{
			get
			{
				return this._runnerEmail;
			}
			set
			{
				if ((this._runnerEmail != value))
				{
					this._runnerEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runnerFullName", DbType="NChar(255)")]
		public string runnerFullName
		{
			get
			{
				return this._runnerFullName;
			}
			set
			{
				if ((this._runnerFullName != value))
				{
					this._runnerFullName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ms", DbType="Int")]
		public System.Nullable<int> ms
		{
			get
			{
				return this._ms;
			}
			set
			{
				if ((this._ms != value))
				{
					this._ms = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spins", DbType="Float")]
		public System.Nullable<double> spins
		{
			get
			{
				return this._spins;
			}
			set
			{
				if ((this._spins != value))
				{
					this._spins = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hs", DbType="Decimal(23,12)")]
		public System.Nullable<decimal> hs
		{
			get
			{
				return this._hs;
			}
			set
			{
				if ((this._hs != value))
				{
					this._hs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rpm", DbType="Float")]
		public System.Nullable<double> rpm
		{
			get
			{
				return this._rpm;
			}
			set
			{
				if ((this._rpm != value))
				{
					this._rpm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meters", DbType="Float")]
		public System.Nullable<double> meters
		{
			get
			{
				return this._meters;
			}
			set
			{
				if ((this._meters != value))
				{
					this._meters = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kmh", DbType="Float")]
		public System.Nullable<double> kmh
		{
			get
			{
				return this._kmh;
			}
			set
			{
				if ((this._kmh != value))
				{
					this._kmh = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
